name: deploy-to-cloud-run

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 30
    concurrency:
      group: production
      cancel-in-progress: false

    steps:

      # 1. Check out code
      - name: Check out source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Set up Google Cloud auth
      # Using a service account key (stored in GitHub Secrets as GCP_SA_KEY)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'

      # 3. Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          install_components: 'beta,kubectl'

      # 4. Configure Docker to use Artifact Registry
      - name: Configure docker to use Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_LOCATION }}-docker.pkg.dev --quiet

      # 5. Free disk space
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          docker system prune -af

      # 6. Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME="${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/api:${{ github.sha }}"
          docker build \
            --cache-from ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/api:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t "$IMAGE_NAME" .
          docker tag "$IMAGE_NAME" ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/api:latest
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # 7. Push Docker image to Artifact Registry
      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}
          docker push ${{ secrets.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/api:latest

      # 8. Set up Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      # 9. Terraform Init
      - name: Terraform init
        run: |
          cd infra && make terraform-init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      # 10. Terraform Plan
      - name: Terraform plan
        run: |
          make terraform-plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_REPOSITORY_NAME: ${{ secrets.GCP_REPOSITORY_NAME }}

      # 11. Terraform Apply
      - name: Terraform apply
        run: |
          make terraform-apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_REPOSITORY_NAME: ${{ secrets.GCP_REPOSITORY_NAME }}

      # # Run setup before deployment
      # - name: Setup GCP resources
      #   run: make setup-gcp
      #   env:
      #     GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
      #     GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      #     GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
      #     GCP_REPOSITORY_NAME: ${{ secrets.GCP_REPOSITORY_NAME }}

      # Validate deployment
      - name: Validate deployment
        run: |
          sleep 30  # Wait for deployment to stabilize
          make test-health
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}